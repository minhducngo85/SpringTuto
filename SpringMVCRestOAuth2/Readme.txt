This taken from Internet: http://websystique.com/spring-security/secure-spring-rest-api-using-oauth2/

1. OAuth2 Roles
OAuth2 defines four roles:
- resource owner:
    Could be you. An entity capable of granting access to a protected resource. When the resource owner is a person, it is referred to as an end-user.
- resource server:
    The server hosting the protected resources, capable of accepting and responding to protected resource requests using access tokens.
- client:
    An application making protected resource requests on behalf of the resource owner and with its authorization. It could be a mobile app asking your permission to access your Facebook feeds, a REST client trying to access REST API, a web site [Stackoverflow e.g.] providing an alternative login option using Facebook account.
- authorization server:
    The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization.

 In our example, our REST API can only be accessed via Resource server which will require an access token to be present with request
 
2. OAuth2 Authorization Grant types
 An authorization grant is a credential representing the resource owner�s authorization (to access its protected resources) used by the client to obtain an access token. The specification defines four grant types:
	- authorization code
    - implicit
    - resource owner password credentials: which we are using
    - client credentials
 
 A common example is the GMail app [a client] on your smartphone which takes your credentials and use them to connect to GMail servers. 
 It also shows that �Password Credentials Grant� is best suited when both the client and the servers are from same company as the trust is there, you don�t want to provide your credentials to a third party.
 
3. OAuth2 Tokens
   Tokens are implementation specific random strings, generated by the authorization server and are issued when the client requests them.

   -  Access Token : Sent with each request, usually valid for a very short life time [an hour e.g.]
   -  Refresh Token : Mainly used to get a new access token, not sent with each request, usually lives longer than access token.
   
  Basic Authentication + HTTPS = OAuth2 (regarding security level)
 
4. OAuth2 Access Token Scope
Client can ask for the resource with specific access rights using scope [want to access feeds & photos of this users facebook account], 
and authorization server in turn return scope showing what access rights were actually granted to the client [Resource owner only allowed feeds access, no photos e.g.]. 

5. Endpoints and their purpose

  - Attempt to access resources [REST API] without any authorization [will fail of-course].
    GET http://localhost:8080/SpringSecurityOAuth2Example/user/
  
  - Ask for tokens[access+refresh] using HTTP POST on /oauth/token, with grant_type=password,and resource owners credentials as req-params. Additionally, send client credentials in Authorization header.

    POST http://localhost:8080/SpringSecurityOAuth2Example/oauth/token?grant_type=password&username=bill&password=abc123
  
  - Ask for a new access token via valid refresh-token, using HTTP POST on /oauth/token, with grant_type=refresh_token,and sending actual refresh token. Additionally, send client credentials in Authorization header.

    POST http://localhost:8080/SpringSecurityOAuth2Example/oauth/token?grant_type=refresh_token&refresh_token=094b7d23-973f-4cc1-83ad-8ffd43de1845
  
  - Access the resource by providing an access token using access_token query param with request.
    GET http://localhost:8080/SpringSecurityOAuth2Example/user/?access_token=3525d0e4-d881-49e7-9f91-bcfd18259109

 