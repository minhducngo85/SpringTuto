package kap17_DS_In_MultiThreaded_Umgebung;/** * Codebeispiel f√ºr grobgranulare Synchronisierung. * Bei jeder Methode wird die ganze Liste gesperrt. */import java.util.Comparator;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;public class CoarseList<T> implements IList<T>{  private List<T> mList;  private Lock mLock = new ReentrantLock();  public CoarseList(final Comparator<T> comp, T begin, T end)  {    mList = new List<T>(comp, begin, end);  }  public boolean add(T item)  {    mLock.lock();    try    {      return mList.add(item);    }    finally    {      mLock.unlock();    }  }  public boolean remove(T item)  {    mLock.lock();    try    {      return mList.remove(item);    }    finally    {      mLock.unlock();    }  }  public boolean contains(T item)  {    mLock.lock();    try    {      return mList.contains(item);    }    finally    {      mLock.unlock();    }  }}